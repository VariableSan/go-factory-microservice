version: "3"

vars:
  SERVICES: auth

tasks:
  default:
    desc: Show available tasks
    cmds: [ task --list ]

  setup:
    desc: Sync workspace and install tools
    cmds:
      - go work sync
      - task: install-tools
      - task: generate-proto

  install-tools:
    desc: Install required development tools
    cmds:
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - go install github.com/golang-migrate/migrate/v4/cmd/migrate@latest

  generate-proto:
    desc: Generate Go code from all proto files
    dir: pkg/proto
    cmds:
      - task: generate-proto-auth
      - task: generate-proto-common
    sources:
      - "**/*.proto"
    generates:
      - "**/*.pb.go"
      - "**/*_grpc.pb.go"

  generate-proto-auth:
    desc: Generate Go code for auth service proto
    dir: pkg/proto
    cmds:
      - |
        protoc \
          --go_out=. \
          --go_opt=paths=source_relative \
          --go-grpc_out=. \
          --go-grpc_opt=paths=source_relative \
          auth/auth.proto
    sources:
      - auth/auth.proto
    generates:
      - auth/auth.pb.go
      - auth/auth_grpc.pb.go

  generate-proto-common:
    desc: Generate Go code for common proto messages
    dir: pkg/proto
    cmds:
      - |
        protoc \
          --go_out=. \
          --go_opt=paths=source_relative \
          --go-grpc_out=. \
          --go-grpc_opt=paths=source_relative \
          common/common.proto
    sources:
      - common/common.proto
    generates:
      - common/common.pb.go
      - common/common_grpc.pb.go

  build:
    cmds:
      - for: { var: SERVICES }
        cmd: task build-service SERVICE={{.ITEM}}

  build-service:
    vars: { SERVICE: "" }
    cmds:
      - cd services/{{.SERVICE}} && go build -o bin/{{.SERVICE}} ./cmd

  test:
    cmds: [ go test ./... ]

  docker-build:
    cmds:
      - for: { var: SERVICES }
        cmd: docker build -f services/{{.ITEM}}/Dockerfile -t go-factory-{{.ITEM}}:latest .

  docker-up:
    cmds: [ docker-compose up -d ]

  docker-down:
    cmds: [ docker-compose down ]

  clean:
    desc: Clean build artifacts and containers
    cmds:
      - task: clean-build
      - task: clean-proto
      - task: clean-docker

  clean-build:
    desc: Clean build artifacts
    cmds:
      - for: { var: SERVICES }
        cmd: cd services/{{.ITEM}} && Remove-Item -Recurse -Force bin -ErrorAction SilentlyContinue

  clean-proto:
    desc: Clean generated proto files
    dir: pkg/proto
    cmds:
      - Remove-Item -Force "**/*.pb.go" -ErrorAction SilentlyContinue

  clean-docker:
    desc: Stop and remove containers with volumes
    cmds:
      - docker-compose down --volumes --remove-orphans

  mod-tidy:
    desc: Run go mod tidy on all modules
    cmds:
      - cd pkg/common && go mod tidy
      - cd pkg/proto && go mod tidy
      - for: { var: SERVICES }
        cmd: cd services/{{.ITEM}} && go mod tidy

  lint:
    desc: Run linting on all Go code
    cmds:
      - go vet ./...
      - for: { var: SERVICES }
        cmd: cd services/{{.ITEM}} && go vet ./...

  format:
    desc: Format all Go code
    cmds:
      - go fmt ./...
      - for: { var: SERVICES }
        cmd: cd services/{{.ITEM}} && go fmt ./...
